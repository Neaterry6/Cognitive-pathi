import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { User, Subject } from '@shared/schema';
import { 
  ArrowLeft, 
  BookOpen, 
  Zap, 
  RefreshCw, 
  Play,
  CheckCircle,
  Clock,
  Brain,
  Lightbulb
} from 'lucide-react';

interface StudyPlanProps {
  user: User;
  selectedSubject: Subject;
  onBack: () => void;
}

interface Topic {
  id: string;
  name: string;
  description: string;
  difficulty: 'easy' | 'medium' | 'hard';
  estimatedTime: string;
  completed: boolean;
  aiGenerated?: boolean;
}

export default function EnhancedStudyPlan({ user, selectedSubject, onBack }: StudyPlanProps) {
  const [selectedTopic, setSelectedTopic] = useState<string | null>(null);
  const [studyContent, setStudyContent] = useState<string>('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [aiModel, setAiModel] = useState<'gemini' | 'gpt' | 'static'>('gemini');
  const [progress, setProgress] = useState(0);

  // Mock study topics based on subject
  const getTopicsForSubject = (subject: Subject): Topic[] => {
    const baseTopics = {
      'Physics': [
        { id: '1', name: 'Motion and Forces', description: 'Newton\'s laws, kinematics, dynamics', difficulty: 'medium', estimatedTime: '2 hours', completed: false },
        { id: '2', name: 'Energy and Power', description: 'Kinetic, potential energy, work', difficulty: 'easy', estimatedTime: '1.5 hours', completed: false },
        { id: '3', name: 'Waves and Oscillations', description: 'Sound, light, simple harmonic motion', difficulty: 'hard', estimatedTime: '3 hours', completed: false },
        { id: '4', name: 'Electricity and Magnetism', description: 'Current, voltage, magnetic fields', difficulty: 'hard', estimatedTime: '2.5 hours', completed: false },
      ],
      'Chemistry': [
        { id: '1', name: 'Atomic Structure', description: 'Electrons, protons, neutrons, orbitals', difficulty: 'medium', estimatedTime: '2 hours', completed: false },
        { id: '2', name: 'Chemical Bonding', description: 'Ionic, covalent, metallic bonds', difficulty: 'medium', estimatedTime: '2.5 hours', completed: false },
        { id: '3', name: 'Acids and Bases', description: 'pH, neutralization, indicators', difficulty: 'easy', estimatedTime: '1.5 hours', completed: false },
        { id: '4', name: 'Organic Chemistry', description: 'Hydrocarbons, functional groups', difficulty: 'hard', estimatedTime: '3 hours', completed: false },
      ],
      'Mathematics': [
        { id: '1', name: 'Algebra', description: 'Linear equations, quadratics, polynomials', difficulty: 'medium', estimatedTime: '2 hours', completed: false },
        { id: '2', name: 'Trigonometry', description: 'Sine, cosine, tangent, identities', difficulty: 'hard', estimatedTime: '2.5 hours', completed: false },
        { id: '3', name: 'Calculus', description: 'Differentiation, integration', difficulty: 'hard', estimatedTime: '3 hours', completed: false },
        { id: '4', name: 'Statistics', description: 'Mean, median, standard deviation', difficulty: 'easy', estimatedTime: '1.5 hours', completed: false },
      ],
    };
    
    return baseTopics[subject.name as keyof typeof baseTopics] || [
      { id: '1', name: 'Introduction', description: 'Basic concepts and fundamentals', difficulty: 'easy', estimatedTime: '1 hour', completed: false },
      { id: '2', name: 'Intermediate Concepts', description: 'Building on the basics', difficulty: 'medium', estimatedTime: '2 hours', completed: false },
      { id: '3', name: 'Advanced Topics', description: 'Complex applications', difficulty: 'hard', estimatedTime: '3 hours', completed: false },
    ];
  };

  const topics = getTopicsForSubject(selectedSubject);
  const completedTopics = topics.filter(t => t.completed).length;
  const totalTopics = topics.length;
  const progressPercentage = (completedTopics / totalTopics) * 100;

  const generateStudyContent = async (topicId: string) => {
    const topic = topics.find(t => t.id === topicId);
    if (!topic) return;

    setIsGenerating(true);
    setSelectedTopic(topicId);
    
    try {
      // Simulate AI content generation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const mockContent = {
        'gemini': `# ${topic.name} - Comprehensive Study Guide (Generated by Gemini)

## Learning Objectives
By the end of this study session, you will be able to:
- Understand the fundamental concepts of ${topic.name}
- Apply key principles to solve problems
- Connect these concepts to real-world applications

## Core Concepts

### 1. Introduction
${topic.description}

### 2. Key Principles
- **Principle 1**: Detailed explanation with examples
- **Principle 2**: Step-by-step breakdown
- **Principle 3**: Common applications

### 3. Problem-Solving Strategies
1. Identify the given information
2. Determine what you need to find
3. Apply the appropriate formulas or methods
4. Check your answer for reasonableness

### 4. Practice Problems
**Example 1**: Basic application
- Problem statement
- Solution steps
- Answer explanation

**Example 2**: Intermediate challenge
- More complex scenario
- Detailed solution process
- Key insights

### 5. Common Mistakes to Avoid
- Mistake 1: Description and how to avoid
- Mistake 2: Common misconception
- Mistake 3: Calculation errors

### 6. Quick Review Questions
1. What are the main components of ${topic.name}?
2. How does this concept relate to other topics?
3. What are the practical applications?

## Study Tips
- Use visual aids and diagrams
- Practice regularly with varied problems
- Connect concepts to everyday experiences
- Form study groups for discussion

## Next Steps
After mastering this topic, proceed to the next related concept in your study plan.`,

        'gpt': `# ${topic.name} - AI Study Guide (GPT-4 Enhanced)

## Executive Summary
This comprehensive guide covers ${topic.name} with interactive examples and advanced problem-solving techniques.

## Conceptual Framework

### Foundation Level
Understanding ${topic.description} requires mastering these building blocks:
- Core definitions and terminology
- Historical context and development
- Mathematical or logical foundations

### Application Level
Real-world applications include:
- Industry examples
- Scientific applications
- Everyday phenomena

### Analysis Level
Critical thinking aspects:
- Comparing different approaches
- Evaluating effectiveness
- Synthesizing information

## Interactive Learning Activities

### Activity 1: Concept Mapping
Create connections between different aspects of ${topic.name}

### Activity 2: Problem Solving
Work through progressively challenging scenarios

### Activity 3: Peer Teaching
Explain concepts to reinforce understanding

## Assessment Preparation
- Key formulas to memorize
- Common question types
- Time management strategies
- Practice test items

## Advanced Applications
For students seeking deeper understanding:
- Research applications
- Cross-curricular connections
- Future developments

## Resources for Further Study
- Recommended textbooks
- Online simulations
- Video explanations
- Practice databases`,

        'static': `# ${topic.name} - Standard Study Material

## Topic Overview
${topic.description}

## Key Points
- Important concept 1
- Important concept 2  
- Important concept 3

## Examples
Basic example demonstrating the concepts

## Practice Questions
1. Question 1
2. Question 2
3. Question 3

## Summary
Brief recap of main points covered in this topic.`
      };

      setStudyContent(mockContent[aiModel]);
    } catch (error) {
      console.error('Error generating study content:', error);
      setStudyContent('Error generating content. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const markTopicComplete = (topicId: string) => {
    // Update topic completion status
    const updatedProgress = Math.min(progress + (100 / topics.length), 100);
    setProgress(updatedProgress);
  };

  const startTopicQuiz = async (topicId: string) => {
    const topic = topics.find(t => t.id === topicId);
    if (!topic || !studyContent) {
      alert('Please study the topic first before taking the quiz');
      return;
    }

    try {
      // Generate quiz questions based on the study content using AI
      const response = await fetch('/api/ai/generate-quiz', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          topic: topic.name,
          content: studyContent,
          subjectId: selectedSubject.id,
          difficulty: topic.difficulty,
          questionCount: 10
        })
      });

      if (response.ok) {
        const quizData = await response.json();
        // Create quiz session with generated questions
        const sessionResponse = await fetch('/api/quiz/create-session', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            userId: user.id,
            subjectId: selectedSubject.id,
            subjectName: selectedSubject.name,
            questions: quizData.questions,
            mode: 'study',
            topic: topic.name
          })
        });

        if (sessionResponse.ok) {
          const session = await sessionResponse.json();
          // Navigate to quiz (you would implement navigation here)
          window.location.href = `/quiz/${session.id}`;
        } else {
          const error = await sessionResponse.json();
          alert('Failed to create quiz session: ' + error.message);
        }
      } else {
        alert('Failed to generate quiz questions. Please try again.');
      }
    } catch (error) {
      console.error('Error starting topic quiz:', error);
      alert('Error starting quiz. Please check your connection and try again.');
    }
  };

  if (selectedTopic && studyContent) {
    const topic = topics.find(t => t.id === selectedTopic);
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800">
        {/* Header */}
        <div className="bg-white bg-opacity-10 backdrop-blur-sm">
          <div className="max-w-7xl mx-auto px-4 py-4">
            <div className="flex items-center justify-between">
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setSelectedTopic(null)}
                className="text-white hover:bg-white hover:bg-opacity-20"
              >
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back to Topics
              </Button>
              <h1 className="text-xl font-bold text-white">{topic?.name}</h1>
              <div className="flex items-center space-x-2">
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => generateStudyContent(selectedTopic)}
                  className="bg-white bg-opacity-10 border-white border-opacity-30 text-white hover:bg-white hover:bg-opacity-20"
                >
                  <RefreshCw className="w-4 h-4 mr-2" />
                  Regenerate
                </Button>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => setAiModel(aiModel === 'gemini' ? 'gpt' : aiModel === 'gpt' ? 'static' : 'gemini')}
                  className="bg-white bg-opacity-10 border-white border-opacity-30 text-white hover:bg-white hover:bg-opacity-20"
                >
                  {aiModel === 'gemini' ? '🔮 Gemini' : aiModel === 'gpt' ? '🧠 GPT-4' : '📚 Static'}
                </Button>
              </div>
            </div>
          </div>
        </div>

        <div className="max-w-6xl mx-auto px-4 py-6">
          <Card className="bg-white bg-opacity-10 border-white border-opacity-20">
            <CardContent className="p-8">
              {isGenerating ? (
                <div className="text-center py-12">
                  <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-white mx-auto mb-6"></div>
                  <p className="text-white text-lg">Generating comprehensive study plan...</p>
                  <p className="text-purple-200 text-sm mt-2">Using {aiModel} AI to create personalized content</p>
                </div>
              ) : (
                <div className="prose prose-invert max-w-none">
                  <div className="text-gray-200 whitespace-pre-wrap leading-relaxed">
                    {studyContent}
                  </div>
                  
                  {/* Action Buttons */}
                  <div className="mt-8 flex space-x-4 not-prose">
                    <Button 
                      onClick={() => markTopicComplete(selectedTopic)}
                      className="bg-green-600 hover:bg-green-700 text-white"
                    >
                      <CheckCircle className="w-4 h-4 mr-2" />
                      Mark as Studied
                    </Button>
                    <Button 
                      onClick={() => startTopicQuiz(selectedTopic)}
                      className="bg-blue-600 hover:bg-blue-700 text-white"
                    >
                      <Play className="w-4 h-4 mr-2" />
                      Take Quiz
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800">
      {/* Header */}
      <div className="bg-white bg-opacity-10 backdrop-blur-sm">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center space-x-4">
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={onBack}
              className="text-white hover:bg-white hover:bg-opacity-20"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Dashboard
            </Button>
            <div className="flex-1 text-center">
              <h1 className="text-xl font-bold text-white">📚 AI Study Plan - {selectedSubject.name}</h1>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-6xl mx-auto px-4 py-6">
        {/* Progress Overview */}
        <Card className="bg-white bg-opacity-10 border-white border-opacity-20 mb-6">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold text-white">Study Progress</h2>
              <Badge variant="secondary" className="bg-blue-600 text-white">
                {completedTopics}/{totalTopics} Topics Completed
              </Badge>
            </div>
            <Progress value={progressPercentage} className="mb-2" />
            <p className="text-purple-200 text-sm">{Math.round(progressPercentage)}% Complete</p>
          </CardContent>
        </Card>

        {/* AI Model Selection */}
        <Card className="bg-white bg-opacity-10 border-white border-opacity-20 mb-6">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <Brain className="w-5 h-5 text-purple-300" />
                <span className="text-white font-medium">AI Study Assistant</span>
              </div>
              <div className="flex space-x-2">
                <Button
                  size="sm"
                  variant={aiModel === 'gemini' ? 'default' : 'outline'}
                  onClick={() => setAiModel('gemini')}
                  className={aiModel === 'gemini' ? 'bg-blue-600 text-white' : 'bg-white bg-opacity-10 border-white border-opacity-30 text-white hover:bg-white hover:bg-opacity-20'}
                >
                  🔮 Gemini
                </Button>
                <Button
                  size="sm"
                  variant={aiModel === 'gpt' ? 'default' : 'outline'}
                  onClick={() => setAiModel('gpt')}
                  className={aiModel === 'gpt' ? 'bg-blue-600 text-white' : 'bg-white bg-opacity-10 border-white border-opacity-30 text-white hover:bg-white hover:bg-opacity-20'}
                >
                  🧠 GPT-4
                </Button>
                <Button
                  size="sm"
                  variant={aiModel === 'static' ? 'default' : 'outline'}
                  onClick={() => setAiModel('static')}
                  className={aiModel === 'static' ? 'bg-blue-600 text-white' : 'bg-white bg-opacity-10 border-white border-opacity-30 text-white hover:bg-white hover:bg-opacity-20'}
                >
                  📚 Standard
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Topics Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {topics.map((topic) => (
            <Card key={topic.id} className="bg-white bg-opacity-10 border-white border-opacity-20 hover:bg-opacity-20 transition-all">
              <CardContent className="p-6">
                <div className="flex items-start justify-between mb-4">
                  <h3 className="text-xl font-semibold text-white">{topic.name}</h3>
                  <Badge 
                    variant="secondary" 
                    className={
                      topic.difficulty === 'easy' ? 'bg-green-600 text-white' :
                      topic.difficulty === 'medium' ? 'bg-yellow-600 text-white' :
                      'bg-red-600 text-white'
                    }
                  >
                    {topic.difficulty}
                  </Badge>
                </div>
                
                <p className="text-gray-200 mb-4">{topic.description}</p>
                
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-2 text-purple-200 text-sm">
                    <Clock className="w-4 h-4" />
                    <span>{topic.estimatedTime}</span>
                  </div>
                  {topic.completed && (
                    <div className="flex items-center space-x-1 text-green-400">
                      <CheckCircle className="w-4 h-4" />
                      <span className="text-sm">Completed</span>
                    </div>
                  )}
                </div>

                <div className="flex space-x-3">
                  <Button 
                    onClick={() => generateStudyContent(topic.id)}
                    className="flex-1 bg-blue-600 hover:bg-blue-700 text-white"
                    disabled={isGenerating}
                  >
                    <BookOpen className="w-4 h-4 mr-2" />
                    {isGenerating && selectedTopic === topic.id ? 'Generating...' : 'Study Now'}
                  </Button>
                  <Button 
                    onClick={() => startTopicQuiz(topic.id)}
                    variant="outline"
                    className="bg-white bg-opacity-10 border-white border-opacity-30 text-white hover:bg-white hover:bg-opacity-20"
                  >
                    <Zap className="w-4 h-4" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Study Tips */}
        <Card className="mt-6 bg-gradient-to-r from-purple-600 to-blue-600 border-0">
          <CardContent className="p-6">
            <div className="flex items-center space-x-3 mb-4">
              <Lightbulb className="w-6 h-6 text-white" />
              <h3 className="text-xl font-semibold text-white">AI Study Tips</h3>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-white">
              <div>
                <h4 className="font-medium mb-2">Personalized Learning</h4>
                <p className="text-sm text-blue-100">AI generates content tailored to your learning style and pace</p>
              </div>
              <div>
                <h4 className="font-medium mb-2">Interactive Practice</h4>
                <p className="text-sm text-blue-100">Take topic-specific quizzes to reinforce your understanding</p>
              </div>
              <div>
                <h4 className="font-medium mb-2">Progress Tracking</h4>
                <p className="text-sm text-blue-100">Monitor your completion rate and identify areas for improvement</p>
              </div>
              <div>
                <h4 className="font-medium mb-2">Multi-Model AI</h4>
                <p className="text-sm text-blue-100">Switch between different AI models for varied perspectives</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}